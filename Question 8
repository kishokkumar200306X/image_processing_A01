import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

def zoom_nearest_neighbor(image, zoom_factor):
    h, w, channels = image.shape
    new_h = int(h * zoom_factor)
    new_w = int(w * zoom_factor)
    zoomed_image = np.zeros((new_h, new_w, channels), dtype=np.uint8)

    for i in range(new_h):
        for j in range(new_w):
            orig_i = int(i / zoom_factor)
            orig_j = int(j / zoom_factor)
            zoomed_image[i, j] = image[orig_i, orig_j]

    return zoomed_image

def zoom_bilinear(image, zoom_factor):
    h, w,channels = image.shape
    new_h = int(h * zoom_factor)
    new_w = int(w * zoom_factor)
    zoomed_image = np.zeros((new_h, new_w, channels), dtype=np.uint8)

    for i in range(new_h):
        for j in range(new_w):
            orig_i = i / zoom_factor
            orig_j = j / zoom_factor

            i1, j1 = int(orig_i), int(orig_j)
            i2, j2 = i1 + 1, j1 + 1

            if i2 < h and j2 < w:
                dy, dx = orig_i - i1, orig_j - j1
                zoomed_image[i, j] = (
                    (1 - dx) * (1 - dy) * image[i1, j1] +
                    dx * (1 - dy) * image[i1, j2] +
                    (1 - dx) * dy * image[i2, j1] +
                    dx * dy * image[i2, j2]
                ).astype(np.uint8)

    return zoomed_image

def compute_ssd(image1, image2):
    return np.sum(np.square(image1 - image2))

# Load the original and zoomed-out images
original_image = cv.imread('zoom/im05.png',cv.IMREAD_COLOR)
zoomed_out_image = cv.imread('zoom/im05small.png', cv.IMREAD_COLOR)
org = cv.cvtColor(original_image,cv.COLOR_BGR2RGB)
# Define the zoom factor
zoom_factor = 4

# Zoom using nearest-neighbor interpolation
zoomed_nearest_neighbor = zoom_nearest_neighbor(zoomed_out_image, zoom_factor)
z_nn = cv.cvtColor(zoomed_nearest_neighbor,cv.COLOR_BGR2RGB)

# Zoom using bilinear interpolation
zoomed_bilinear = zoom_bilinear(zoomed_out_image, zoom_factor)
z_bi = cv.cvtColor(zoomed_bilinear,cv.COLOR_BGR2RGB)

# Calculate the SSD for both zooming methods
ssd_nearest_neighbor = compute_ssd(original_image, zoomed_nearest_neighbor)
ssd_bilinear = compute_ssd(original_image, zoomed_bilinear)

print(f"SSD (Nearest Neighbor): {ssd_nearest_neighbor}")
print(f"SSD (Bilinear Interpolation): {ssd_bilinear}")


fig , axes = plt.subplots(1,3, sharex ='all',sharey='all',figsize = (29,29))
axes[0].imshow(org, cmap = 'gray')
axes[0].set_title('original')
axes[0].set_xticks([]), axes[0].set_yticks([])
axes[1].imshow(z_nn, cmap = 'gray')
axes[1].set_title('zoomed up nn')
axes[1].set_xticks([]), axes[1].set_yticks([])
axes[2].imshow(z_bi, cmap = 'gray')
axes[2].set_title('zoomed up bilinear')
axes[2].set_xticks([]), axes[1].set_yticks([])
plt.show()
