import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

img = cv.imread('jeniffer.jpg', cv.IMREAD_COLOR)
assert img is not None
img_org = cv.cvtColor(img, cv.COLOR_BGR2RGB)
hsv_image = cv.cvtColor(img, cv.COLOR_BGR2HSV)

fig , ax = plt.subplots(1,3, figsize = (10,10))
ax[0].imshow(hsv_image[:,:,0], cmap = 'gray', vmin = 0, vmax = 255)
ax[0].set_title('hue')
ax[0].axis('off') 
ax[1].imshow(hsv_image[:,:,1], cmap = 'gray', vmin = 0, vmax = 255)
ax[1].set_title('saturation')
ax[1].axis('off') 
ax[2].imshow(hsv_image[:,:,2], cmap = 'gray', vmin = 0, vmax = 255)
ax[2].set_title('value')
ax[2].axis('off') 
plt.show()

# Split the HSV image into hue, saturation, and value planes
hue, saturation, value = cv.split(hsv_image)

# Threshold to extract the foreground mask
_, foreground_mask = cv.threshold(value, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU)

# Obtain the foreground using the mask
foreground = cv.bitwise_and(value, value, mask=foreground_mask)

# Calculate the histogram of the foreground
histogram = cv.calcHist([foreground], [0], None, [256], [0, 256])

# Calculate the cumulative sum of the histogram
cumulative_histogram = np.cumsum(histogram)

# Histogram equalization formulas
equation = (cumulative_histogram[foreground] - cumulative_histogram[foreground].min()) * 255 / (cumulative_histogram[foreground].max() - cumulative_histogram[foreground].min())
equalized_foreground = equation.astype(np.uint8)

# Create the equalized HSV image
equalized_hsv = cv.merge([hue, saturation, equalized_foreground])

# Convert the equalized HSV image back to BGR
equalized_image = cv.cvtColor(equalized_hsv, cv.COLOR_HSV2BGR)

# Combine the equalized foreground with the background
background = cv.bitwise_and(img, img, mask=cv.bitwise_not(foreground_mask))
result = cv.add(background, equalized_image)
result = cv.cvtColor(result,cv.COLOR_BGR2RGB)


# Display the hue, saturation, and value planes
fig , ax = plt.subplots(1,3, figsize = (10,10))
ax[0].imshow(img_org, cmap = 'gray', vmin = 0, vmax = 255)
ax[0].set_title('original')
ax[0].axis('off') 
ax[1].imshow(foreground_mask, cmap = 'gray', vmin = 0, vmax = 255)
ax[1].set_title('foreground mask')
ax[1].axis('off') 
ax[2].imshow(result, cmap = 'gray', vmin = 0, vmax = 255)
ax[2].set_title('result')
ax[2].axis('off') 
